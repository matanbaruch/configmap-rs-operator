name: E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  e2e:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        kubernetes-version: ["v1.27.11", "v1.28.7", "v1.29.2"]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: controller:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create Kind cluster
      uses: helm/kind-action@v1
      with:
        node_image: kindest/node:${{ matrix.kubernetes-version }}
        cluster_name: kind
        config: |
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            extraPortMappings:
            - containerPort: 8080
              hostPort: 8080

    - name: Load Docker image into Kind
      run: |
        kind load docker-image controller:latest

    - name: Install cert-manager
      run: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.3/cert-manager.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/cert-manager -n cert-manager
        kubectl wait --for=condition=available --timeout=300s deployment/cert-manager-cainjector -n cert-manager
        kubectl wait --for=condition=available --timeout=300s deployment/cert-manager-webhook -n cert-manager

    - name: Run E2E tests
      run: |
        export IMG=controller:latest
        make test-e2e

    - name: Collect logs on failure
      if: failure()
      run: |
        echo "=== Kubernetes Events ==="
        kubectl get events --all-namespaces --sort-by='.lastTimestamp'
        
        echo "=== Controller Logs ==="
        kubectl logs -n configmap-rs-operator-system -l control-plane=controller-manager --tail=100
        
        echo "=== Pod Status ==="
        kubectl get pods --all-namespaces
        
        echo "=== Node Status ==="
        kubectl get nodes -o wide